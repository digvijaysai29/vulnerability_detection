# src/train.py

from data_loader import load_data, preprocess_data
from model import build_model
from sklearn.model_selection import train_test_split
from sklearn.utils.class_weight import compute_class_weight
import numpy as np


def train_model(file_path):
    """
    Train the LSTM vulnerability detection model.

    Parameters:
    - file_path: Path to the CSV dataset

    Returns:
    - history: Training history object containing accuracy and loss metrics
    """

    # Load and preprocess data
    data = load_data(file_path)
    X, y = preprocess_data(data)

    if y is None:
        raise ValueError("Labels (y) are missing. Please check your dataset.")

    # Split into training and testing sets (80% train, 20% test)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

    # Compute class weights to handle class imbalance
    class_weights = compute_class_weight('balanced', np.unique(y_train.argmax(axis=1)), y_train.argmax(axis=1))
    class_weights_dict = dict(enumerate(class_weights))

    # Build the LSTM model (adjust input_dim based on your dataset)
    input_dim = 10000  # Number of words in vocabulary (same as num_words used in Tokenizer)
    output_dim = y_train.shape[1] if len(y_train.shape) > 1 else len(y_train.unique())  # Number of classes

    model = build_model(input_dim=input_dim, output_dim=output_dim)

    # Train the model with class weights for 10 epochs (adjust as needed)
    history = model.fit(X_train, y_train, epochs=10, validation_split=0.2, class_weight=class_weights_dict)

    # Evaluate on test set
    test_loss, test_accuracy = model.evaluate(X_test, y_test)

    print(f"Test Accuracy: {test_accuracy:.4f}")

    return history


if __name__ == "__main__":
    file_path = "/Users/digvijaygujjarlapudi/PycharmProjects/PythonProject/vulnerability_detection/data/known_exploited_vulnerabilities.csv"

    # Train the LSTM vulnerability detection model
try:
    history = train_model(file_path)
except Exception as e:
    print(f"Error during training: {e}")