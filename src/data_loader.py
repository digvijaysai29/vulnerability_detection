# src/data_loader.py

import pandas as pd
import os
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences


def load_data(file_path):
    """
    Load dataset from CSV file.

    Parameters:
    - file_path: Path to the CSV dataset

    Returns:
    - data: Loaded dataset as a pandas DataFrame
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")

    data = pd.read_csv(file_path)
    print(f"Columns in dataset: {data.columns}")
    print(data.head())  # Print the first few rows to inspect the data
    return data


def preprocess_data(data):
    """
    Preprocess the dataset.

    Parameters:
    - data: Pandas DataFrame containing the dataset

    Returns:
    - X: Features (input data) as tokenized sequences
    - y: Labels (target data) or None if no valid label column is found
    """

    # Check for missing values and handle them
    if data.isnull().values.any():
        print("Missing values found. Handling missing data...")
        data = data.dropna()  # Drop rows with missing values

    # Define features (X) and labels (y)

    # Select relevant textual features for training
    X_text = data[['vendorProject', 'product', 'vulnerabilityName', 'shortDescription', 'requiredAction']].astype(str)

    # Flatten the selected columns into a single string per row
    X_text = X_text.apply(lambda row: ' '.join(row.values), axis=1)

    # Initialize a tokenizer
    tokenizer = Tokenizer(num_words=10000, oov_token="<OOV>")  # Adjust num_words based on vocabulary size
    tokenizer.fit_on_texts(X_text)

    # Convert text to sequences of integers
    X_sequences = tokenizer.texts_to_sequences(X_text)

    # Pad sequences to ensure uniform input size
    X_padded = pad_sequences(X_sequences, padding='post', maxlen=100)  # Adjust maxlen as needed

    # Use 'cwes' as labels if it exists
    if 'cwes' in data.columns:
        y = pd.get_dummies(data['cwes'])  # One-hot encode CWE types for multi-class classification
        print("Using 'cwes' as labels.")
    else:
        print("No valid label column found ('cwes').")
        y = None

    return X_padded, y


if __name__ == "__main__":
    file_path = "/Users/digvijaygujjarlapudi/PycharmProjects/PythonProject/vulnerability_detection/data/known_exploited_vulnerabilities.csv"

    # Load and preprocess the data
    try:
        data = load_data(file_path)
        X, y = preprocess_data(data)
        print(f"Preprocessing complete. Features shape: {X.shape}, Labels shape: {y.shape if y is not None else 'N/A'}")

        if y is None:
            print("Warning: No labels found. Please check your dataset.")

    except Exception as e:
        print(f"Error: {e}")